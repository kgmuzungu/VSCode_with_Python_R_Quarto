[
  {
    "objectID": "my_R_and_python_example.html",
    "href": "my_R_and_python_example.html",
    "title": "Python and R together",
    "section": "",
    "text": "library(tidyverse)\nlibrary(reticulate)\n# github Actions workflow is with the current publish.yml no setting up a venv\n# uncomment it if you run this file in VSCode\n#use_virtualenv(\"./.venv\", required=TRUE)  # tells R reticulate to use this Python virtual envivonment\n\n\ndf_r &lt;- read.csv(\"./data/covid.csv\")\nnrow(df_r)\n\n[1] 20780"
  },
  {
    "objectID": "my_R_and_python_example.html#starting-wiht-r-code",
    "href": "my_R_and_python_example.html#starting-wiht-r-code",
    "title": "Python and R together",
    "section": "",
    "text": "library(tidyverse)\nlibrary(reticulate)\n# github Actions workflow is with the current publish.yml no setting up a venv\n# uncomment it if you run this file in VSCode\n#use_virtualenv(\"./.venv\", required=TRUE)  # tells R reticulate to use this Python virtual envivonment\n\n\ndf_r &lt;- read.csv(\"./data/covid.csv\")\nnrow(df_r)\n\n[1] 20780"
  },
  {
    "objectID": "my_R_and_python_example.html#some-python-code",
    "href": "my_R_and_python_example.html#some-python-code",
    "title": "Python and R together",
    "section": "Some Python code",
    "text": "Some Python code\n\nimport pandas as pd\n\ndf_python_covid = pd.read_csv(\"./data/covid.csv\")\ndf_python_covid.shape\n\n(20780, 6)\n\ndf_python_covid.isna().sum()\n\ndate                   0\nstate               2153\ntests                  0\ncases                  0\nhospitalizations       0\ndeaths                 0\ndtype: int64\n\ndf_python_covid.dropna(inplace=True)\ndf_python_covid.isna().sum()\n\ndate                0\nstate               0\ntests               0\ncases               0\nhospitalizations    0\ndeaths              0\ndtype: int64\n\ndf_python_covid_agg = df_python_covid.groupby('state')['deaths'].sum()\ndf_python_covid_agg.index\n\nIndex(['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'IA',\n       'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO',\n       'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK',\n       'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI',\n       'WV', 'WY'],\n      dtype='object', name='state')"
  },
  {
    "objectID": "my_R_and_python_example.html#how-to-exchange-dataframes-between-python-and-r",
    "href": "my_R_and_python_example.html#how-to-exchange-dataframes-between-python-and-r",
    "title": "Python and R together",
    "section": "How to exchange dataframes between Python and R",
    "text": "How to exchange dataframes between Python and R\n\nPython to R\nR to Python\n\n\nnrow(reticulate::py$df_python_covid)\n\n[1] 18627\n\nback_to_r = reticulate::py$df_python_covid_agg\nhead(back_to_r, 5)\n\n   AK    AL    AR    AZ    CA \n  305 10148  5319 16328 54124 \n\n\n\ntype(r.df_r)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;"
  },
  {
    "objectID": "my_R_and_python_example.html#multi-index-example",
    "href": "my_R_and_python_example.html#multi-index-example",
    "title": "Python and R together",
    "section": "Multi-index example",
    "text": "Multi-index example\nmpg - miles per gallon - is a dataset included in R\n\nhead(mpg,5)\n\n# A tibble: 5 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n\n\n\ndf_mpg = r.mpg\n#df_mpg.shape\n#df_mpg.info()\ndf_mpg_grouped = df_mpg.groupby(['manufacturer','class'])['year'].value_counts()\ndf_mpg_grouped_reset_index = df_mpg_grouped.reset_index()\ndf_mpg_grouped.head(5)\n\nmanufacturer  class    year\naudi          compact  1999    8\n                       2008    7\n              midsize  2008    2\n                       1999    1\nchevrolet     2seater  2008    3\nName: count, dtype: int64\n\ndf_mpg_grouped_reset_index.head(5)\n\n  manufacturer    class  year  count\n0         audi  compact  1999      8\n1         audi  compact  2008      7\n2         audi  midsize  2008      2\n3         audi  midsize  1999      1\n4    chevrolet  2seater  2008      3\n\n\n\nhead(reticulate::py$df_mpg_grouped, 5)  # multi-index\n\n     ('audi', 'compact', 1999)      ('audi', 'compact', 2008) \n                             8                              7 \n     ('audi', 'midsize', 2008)      ('audi', 'midsize', 1999) \n                             2                              1 \n('chevrolet', '2seater', 2008) \n                             3 \n\nprint(\"---------\")\n\n[1] \"---------\"\n\nhead(reticulate::py$df_mpg_grouped_reset_index, 5)  # collapsed multi-index\n\n  manufacturer   class year count\n1         audi compact 1999     8\n2         audi compact 2008     7\n3         audi midsize 2008     2\n4         audi midsize 1999     1\n5    chevrolet 2seater 2008     3\n\n#reticulate::py_last_error()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "",
    "text": "This article guides you through installing Python, R, and Quarto in VSCode on a Windows machine."
  },
  {
    "objectID": "index.html#downloads",
    "href": "index.html#downloads",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Downloads",
    "text": "Downloads\nDownload the installers for:\n\nPython download https://www.python.org/downloads/\nR download https://cran.r-project.org/bin/windows/base/\nVSCode download https://code.visualstudio.com/download\nQuarto download https://quarto.org/docs/download/\nGit download https://git-scm.com/download/win\n\nFirst we install Python. You can have multiple Python versions installed in parallel. On Windows machines Python can be installed in different locations, depending if it was installed via the app store or as an installable. Open e cmd.exe or powershell.exe and type python --version. You will get the Python interpreter version of the python.exe that is in the %PATH% variable. It can be handy to have the folders with python.exe in the PATH variable. Normally pip is installed with Python. pip is the python package installer. You can type pip --version on the command line. If you dont get a response then you might have to install pip separately.\nAlso install R, Quarto, Git and VSCode. The order does not matter\nThe paths of the executables of all should be in the PATH environment variable of Windows. echo %PATH% on cmd.exe. Or/and you should know the respective paths so we can add them to the VSCode extenstions manually."
  },
  {
    "objectID": "index.html#vscode-extensions",
    "href": "index.html#vscode-extensions",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "VSCode extensions",
    "text": "VSCode extensions\nIn VSCode we need some extensions to interact properly with the above installed. The extensions names are listed below.\n\nFor Python:\n\nPython\nPython debugger\nPylance\n\nFor R:\n\nR\nR debugger\n\nQuarto\n\n\n\n\n\n\n\nTip\n\n\n\nYou can set VSCode to autosave."
  },
  {
    "objectID": "index.html#python-virtual-environment",
    "href": "index.html#python-virtual-environment",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Python virtual environment",
    "text": "Python virtual environment\nCreate a folder for a Python/R project with a Windows explorer and open it with File –&gt; Open Folder. Now we create a virtual Python environment in this folder. With Ctrl + shift + p open the VSCode command palette. Type “create” and you should see Python: Create Environment. VSCode will find a the python interpreter that is in %PATH% or you can enter a path to a different python.exe (different version). From now onward, if you use pip to install a python library, it will be installed locally in the ./.venv folder of your project. You should have a .venv folder in your project folder.\nWith Terminal –&gt; New Terminal open a new terminal window (basically a OS command line). Lets install the python library radian. radian makes the R console colorful and better readable. Open a terminal and pip install -U radian installs the required files. We need some more Python libraries. pip install pandas installs the pandas library. pip list lists all locally installed libraries and pip freeze &gt; requirements.txt creates a list with all installed libraries plus version numbers. A great interactive python console is ipython, pip install ipython. Other useful packages are plotnine, statsmodels, scipy."
  },
  {
    "objectID": "index.html#customize-vscode-extensions",
    "href": "index.html#customize-vscode-extensions",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Customize VSCode extensions",
    "text": "Customize VSCode extensions\nWe still have to adapt a few settings in the VSCode extensions. Click on the Extensions symbol on the very left side, then on the sproket, select Extension settings. Look for R &gt; Rterm: Windows and enter the path for radian ({workspaceFolder}\\.venv\\Scripts\\radian.exe … copy this path as it is. You dont have to replace {workspaceFolder} with an explicit path). Set R: Bracketed Paste. And in the R debugger extension we need to set the the R interpreter path, R &gt; Rpath Windows to, e.g. C:\\Program Files\\R\\R-4.4.1\\bin\\x64\\R.exe. Note that the extension settings are global to all VSCode projects."
  },
  {
    "objectID": "index.html#getting-r-ready",
    "href": "index.html#getting-r-ready",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Getting R ready",
    "text": "Getting R ready\nFor R to work properly we need first three R packages: languageserver and httpg. Simplest way is to click on the R symbol on the very left of VSCode (somewhere below the extensions symbol). Under ‘help pages’ click on ‘Install CRAN Package’ or on the plus sign next to it and install * httpg and * languageserver * renv\nAt this point we have a working quarto setup with a virtual Python environment and globally installed R packages. We can also setup a virtual R environment, (renv)[https://rstudio.github.io/renv/articles/renv.html], to keep R packages local in the project folder. Virtual environments allow different projects using different interpreters and package versions."
  },
  {
    "objectID": "index.html#using-renv",
    "href": "index.html#using-renv",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Using renv",
    "text": "Using renv\nInstalling renv: More information can be found here renv. With renv::init() on the R console we create a R environment in the current project folder. To open the R console just type radian on a VSCode terminal command line (Terminal -&gt; New Terminal). You can also type R.exe for a plain R console. After restarting the R session (exit the console with q() )we should also install the following packages from the R console.\n\ninstall.packages(\"languageserver\")\ninstall.packages(\"httpgd\")\ninstall.packages(\"reticulate\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggplot2\")\n\nHint: renv.lock only reflects packages used in the project, see. To be sure that renv.lock is up to date, type renv::snapshot() after writing some R code."
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Quarto",
    "text": "Quarto\nQuarto commands are available from the terminal command line. To render a .qmd you would type quarto render myScrip.qmd for example. Tip: quarto install tinytex from the terminal command line, installs a library that allows .pdf rendering from quarto.\n\n\n\n\n\n\nImportant\n\n\n\nBoth Python and R? I would say if you only need Python then do not install a mixed environment. You only need the Python part. Same for R only."
  },
  {
    "objectID": "index.html#lets-try-it-out",
    "href": "index.html#lets-try-it-out",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Let’s try it out!",
    "text": "Let’s try it out!\nmy_R_and_python_example.qmd shows how to use R and Python in the same Quarto document, how to exchange dataframes and how multi-indexing is translated. …. we could also execute and render this .qmd file with a Action workflow on GitHub … like here"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Resources",
    "text": "Resources\nPython download https://www.python.org/downloads/\nVSCode download https://code.visualstudio.com/download\nQuarto download https://quarto.org/docs/download/\nGit download https://git-scm.com/download/win\nQuarto HTML basics https://quarto.org/docs/output-formats/html-basics.html\nQuarto Markdown basics https://quarto.org/docs/authoring/markdown-basics.html\nQuarto GitHub Pages https://quarto.org/docs/publishing/github-pages.html\nrenv https://rstudio.github.io/renv/articles/renv.html\nsome tweak for renv"
  },
  {
    "objectID": "index.html#helpful-videos",
    "href": "index.html#helpful-videos",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "Helpful videos",
    "text": "Helpful videos\nGit in VSCode https://www.youtube.com/watch?v=i_23KUAEtUM"
  },
  {
    "objectID": "index.html#how-this-page-was-published-on-github-pages",
    "href": "index.html#how-this-page-was-published-on-github-pages",
    "title": "Setting up VSCode for Python, R and Quarto",
    "section": "How this page was published on GitHub Pages?",
    "text": "How this page was published on GitHub Pages?\nIn .github.yml a GitHub Actions workflow was defined. A how-to can be found here. If you use Actions then you dont need to render to a ./doc directory. In the GitHub Pages settings you do NOT set pages from Actions but keep from gh-pages branch. Also there is a misleading mistake in the how-to:\n\nBefore configuring the publishing action, it’s important that you run quarto publish gh-pages locally, once. This will create the _publish.yml configuration required by the subsequent invocations of the GitHub Action. To do this, run the following from within your project:\n\n… No _publish.yml will ever be created.\nAnd have a look at the source files for this page!\n\n\n\n\n\n\n\nNote\n\n\n\nThis is still a work in progress! Any feedback highly welcome!\n\n\n\n\n\n\n\n\nCaution\n\n\n\nYou can also contribute on Github directly! Become a contributor, make changes and create a pull request.\n\n\n\nThe panda eats, shoots and leaves.\nThe panda eats shoots and leaves."
  }
]