[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Setting up VSCode for Python and R with Quarto",
    "section": "",
    "text": "Note\n\n\n\nThis is still a work in progress! Images will be included. Any feedback highly welcome!\nThis blog guides you through installing Python, R, and Quarto in VSCode on a Windows machine.\nDownload the installers for: * Python download https://www.python.org/downloads/ * R download https://cran.r-project.org/bin/windows/base/ * VSCode download https://code.visualstudio.com/download * Quarto download https://quarto.org/docs/download/ * Git download https://git-scm.com/download/win\nInstall Python. A python.exe will be copied to a folder … and much more. You can have multiple Python versions installed in parallel. Open e cmd.exe or powershell.exe and type python --version. You will get the Python interpreter version of the python.exe that is in the %PATH% variable. It can be handy to have the folders with python.exe in the PATH variable. Normally pip is installed with Python. pip is the python package installer. You can type pip --version on the command line.\nAlso install R, Quarto, Git and VSCode. The order does not matter\nThe paths of the executables of all should be in the PATH environment variable of Windows. echo %PATH% on cmd.exe. Or/and you should now where they are on your machine.\nIn VSCode we need some extensions to interact properly with the above installed. * For Python: + Python + Python debugger + Pylance * For R: + R extension + R debugger * Quarto extension\nNow lets create a folder for a Python/R project and open it with File –&gt; Open Folder. Let’s create a virtual Python environment in this folder. Ctrl + shift + p opens the VSCode command palette. Type “create” and you should see Python: Create Environment. VSCode will find a the python interpreter that is in %PATH% or you can enter a path to a different python.exe (different version). From now onward, if you use pip to install a python library, it will be installed locally in the ./.venv folder of your project.\nWith Terminal –&gt; New Terminal open a new terminal window (basically a OS command line). Lets install the python library radian. radian makes the R console colorful and better readable. Open a terminal and pip install -U radian installs the required files. Let’s get some more Python libraries. pip install pandas installs the pandas library. pip list lists all locally installed libraries and pip freeze &gt; requirements.txt creates a list with all installed libraries plus version numbers. A great interactive python console is ipython, pip install ipython. Other useful packages are plotnine, statsmodels, scipy.\nWe still have to adapt a few settings in the VSCode extensions. Click on the Extensions symbol on the very left side, then on the sproket, select Extension settings. Look for R &gt; Rterm: Windows and enter the path for radian ({workspaceFolder}\\.venv\\Scripts\\radian.exe … copy it. You dont have to replace {workspaceFolder} with a explicit path). And we have to set R: Bracketed Paste. The extension settings are global to all VSCode projects. And in the R debugger extension we need to set the the R interpreter path, R &gt; Rpath Windows to, e.g. C:\\Program Files\\R\\R-4.4.1\\bin\\x64\\R.exe.\nFor R to work properly we need two R packages: languageserver and httpg. Simplest way is to click on the R symbol on the very left (somewhere below the extensions symbol). Under ‘help pages’ click on ‘Install CRAN Package’ or on the plus sign next to it and install * httpg and * languageserver * renv\nAt this point we have a working quarto setup with a virtual Python environment and globally installed R packages. We can also setup a virtual R environment, (renv)[https://rstudio.github.io/renv/articles/renv.html], to keep R packages local in the project folder. Virtual environments allow different projects using different interpreter and package versions.\nInstalling renv: How-to can be found here renv. With renv::init() on the R console creates a R environment in the current project folder. To open the R console just type radian on a VSCode terminal command line (Terminal -&gt; New Terminal). After restarting the R session we should also install the following packages from the R console. * install.packages(\"languageserver\") * install.packages(\"httpgd\") * install.packages(\"reticulate\") * install.packages(\"tidyverse\") * install.packages(\"ggplot2\")\nHint: renv.lock only reflects packages used in the project, (see)[https://rstudio.github.io/renv/articles/faq.html#why-isnt-my-package-being-snapshotted-into-the-lockfile]. To be sure that renv.lock is up to date, type renv::snapshot().\nTip: quarto install tinytex from the terminal command line, installs a library that allows .pdf rendering from quarto.\nOther useful things: * TODOTree extension * set VSCode to autosave"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Setting up VSCode for Python and R with Quarto",
    "section": "Resources",
    "text": "Resources\nPython download https://www.python.org/downloads/ VSCode download https://code.visualstudio.com/download Quarto download https://quarto.org/docs/download/ Git download https://git-scm.com/download/winA py Quarto HTML basics https://quarto.org/docs/output-formats/html-basics.html Quarto Markdown basics https://quarto.org/docs/authoring/markdown-basics.html Quarto GitHub Pages https://quarto.org/docs/publishing/github-pages.html renv https://rstudio.github.io/renv/articles/renv.html\n\nVideos\nGit in VSCode https://www.youtube.com/watch?v=i_23KUAEtUM\nThe panda eats, shoots and leaves. The panda eats shoots and leaves."
  }
]