[
  {
    "objectID": "myRQuarto.html",
    "href": "myRQuarto.html",
    "title": "Python and R together",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(reticulate)\nuse_virtualenv(\"./.venv\", required=TRUE)  #tells R reticulate to use this Python virtual envivonment\n\n\ndf_r &lt;- read.csv(\"./data/covid.csv\")\nnrow(df_r)\n\n[1] 20780"
  },
  {
    "objectID": "myRQuarto.html#r-code",
    "href": "myRQuarto.html#r-code",
    "title": "Python and R together",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(reticulate)\nuse_virtualenv(\"./.venv\", required=TRUE)  #tells R reticulate to use this Python virtual envivonment\n\n\ndf_r &lt;- read.csv(\"./data/covid.csv\")\nnrow(df_r)\n\n[1] 20780"
  },
  {
    "objectID": "myRQuarto.html#python-code",
    "href": "myRQuarto.html#python-code",
    "title": "Python and R together",
    "section": "Python code",
    "text": "Python code\n\nimport pandas as pd\n\ndf_python_covid = pd.read_csv(\"./data/covid.csv\")\ndf_python_covid.shape\n\n(20780, 6)\n\ndf_python_covid.isna().sum()\n\ndate                   0\nstate               2153\ntests                  0\ncases                  0\nhospitalizations       0\ndeaths                 0\ndtype: int64\n\ndf_python_covid.dropna(inplace=True)\ndf_python_covid.isna().sum()\n\ndate                0\nstate               0\ntests               0\ncases               0\nhospitalizations    0\ndeaths              0\ndtype: int64\n\ndf_python_covid_agg = df_python_covid.groupby('state')['deaths'].sum()\ndf_python_covid_agg.index\n\nIndex(['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'IA',\n       'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO',\n       'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK',\n       'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI',\n       'WV', 'WY'],\n      dtype='object', name='state')"
  },
  {
    "objectID": "myRQuarto.html#how-to-exchange-dataframes-between-python-and-r",
    "href": "myRQuarto.html#how-to-exchange-dataframes-between-python-and-r",
    "title": "Python and R together",
    "section": "How to exchange dataframes between Python and R",
    "text": "How to exchange dataframes between Python and R\n(Python to R)[https://stackoverflow.com/questions/74081417/how-to-visualize-a-pandas-dataframe-in-r-chunk-quarto] (R to Python)[https://www.r-bloggers.com/2023/01/combining-r-and-python-with-reticulate-and-quarto/]\n\nnrow(reticulate::py$df_python_covid)\n\n[1] 18627\n\nback_to_r = reticulate::py$df_python_covid_agg\nback_to_r\n\n   AK    AL    AR    AZ    CA    CO    CT    DE    FL    GA    HI    IA    ID \n  305 10148  5319 16328 54124  5989  7704  1473 32266 17906   445  5558  1879 \n   IL    IN    KS    KY    LA    MA    MD    ME    MI    MN    MO    MS    MT \n23014 12737  4812  4819  9748 16417  7955   706 16658  6550  8161  6808  1381 \n   NC    ND    NE    NH    NJ    NM    NV    NY    OH    OK    OR    PA    RI \n11502  1478  2113  1184 23574  3808  5037 39029 17656  4534  2296 24349  2547 \n   SC    SD    TN    TX    UT    VA    VT    WA    WI    WV    WY \n 8754  1900 11543 44451  1976  9596   208  5041  7106  2325   682 \n\n\n\ntype(r.df_r)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;"
  },
  {
    "objectID": "myRQuarto.html#multi-index-example",
    "href": "myRQuarto.html#multi-index-example",
    "title": "Python and R together",
    "section": "Multi-index example",
    "text": "Multi-index example\nmpg - miles per gallon - is a dataset included in R\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\n\ndf_mpg = r.mpg\n#df_mpg.shape\n#df_mpg.info()\ndf_mpg_grouped = df_mpg.groupby(['manufacturer','class'])['year'].value_counts()\ndf_mpg_grouped_reset_index = df_mpg_grouped.reset_index()\nprint(df_mpg_grouped)\n\nmanufacturer  class       year\naudi          compact     1999    8\n                          2008    7\n              midsize     2008    2\n                          1999    1\nchevrolet     2seater     2008    3\n                                 ..\nvolkswagen    compact     2008    6\n              midsize     1999    4\n                          2008    3\n              subcompact  1999    4\n                          2008    2\nName: count, Length: 61, dtype: int64\n\nprint(df_mpg_grouped_reset_index)\n\n   manufacturer       class  year  count\n0          audi     compact  1999      8\n1          audi     compact  2008      7\n2          audi     midsize  2008      2\n3          audi     midsize  1999      1\n4     chevrolet     2seater  2008      3\n..          ...         ...   ...    ...\n56   volkswagen     compact  2008      6\n57   volkswagen     midsize  1999      4\n58   volkswagen     midsize  2008      3\n59   volkswagen  subcompact  1999      4\n60   volkswagen  subcompact  2008      2\n\n[61 rows x 4 columns]\n\n\n\nreticulate::py$df_mpg_grouped  #multi-index\n\n         ('audi', 'compact', 1999)          ('audi', 'compact', 2008) \n                                 8                                  7 \n         ('audi', 'midsize', 2008)          ('audi', 'midsize', 1999) \n                                 2                                  1 \n    ('chevrolet', '2seater', 2008)     ('chevrolet', '2seater', 1999) \n                                 3                                  2 \n    ('chevrolet', 'midsize', 2008)     ('chevrolet', 'midsize', 1999) \n                                 3                                  2 \n        ('chevrolet', 'suv', 2008)         ('chevrolet', 'suv', 1999) \n                                 6                                  3 \n        ('dodge', 'minivan', 1999)         ('dodge', 'minivan', 2008) \n                                 6                                  5 \n         ('dodge', 'pickup', 2008)          ('dodge', 'pickup', 1999) \n                                12                                  7 \n            ('dodge', 'suv', 2008)             ('dodge', 'suv', 1999) \n                                 4                                  3 \n          ('ford', 'pickup', 1999)           ('ford', 'pickup', 2008) \n                                 5                                  2 \n      ('ford', 'subcompact', 2008)       ('ford', 'subcompact', 1999) \n                                 5                                  4 \n             ('ford', 'suv', 1999)              ('ford', 'suv', 2008) \n                                 6                                  3 \n     ('honda', 'subcompact', 1999)      ('honda', 'subcompact', 2008) \n                                 5                                  4 \n      ('hyundai', 'midsize', 1999)       ('hyundai', 'midsize', 2008) \n                                 4                                  3 \n   ('hyundai', 'subcompact', 2008)    ('hyundai', 'subcompact', 1999) \n                                 5                                  2 \n             ('jeep', 'suv', 2008)              ('jeep', 'suv', 1999) \n                                 6                                  2 \n       ('land rover', 'suv', 1999)        ('land rover', 'suv', 2008) \n                                 2                                  2 \n          ('lincoln', 'suv', 1999)           ('lincoln', 'suv', 2008) \n                                 2                                  1 \n          ('mercury', 'suv', 1999)           ('mercury', 'suv', 2008) \n                                 2                                  2 \n       ('nissan', 'compact', 1999)        ('nissan', 'midsize', 2008) \n                                 2                                  5 \n       ('nissan', 'midsize', 1999)            ('nissan', 'suv', 1999) \n                                 2                                  2 \n           ('nissan', 'suv', 2008)       ('pontiac', 'midsize', 1999) \n                                 2                                  3 \n      ('pontiac', 'midsize', 2008)        ('subaru', 'compact', 2008) \n                                 2                                  4 \n    ('subaru', 'subcompact', 1999)            ('subaru', 'suv', 2008) \n                                 4                                  4 \n           ('subaru', 'suv', 1999)        ('toyota', 'compact', 1999) \n                                 2                                  7 \n       ('toyota', 'compact', 2008)        ('toyota', 'midsize', 1999) \n                                 5                                  4 \n       ('toyota', 'midsize', 2008)         ('toyota', 'pickup', 1999) \n                                 3                                  4 \n        ('toyota', 'pickup', 2008)            ('toyota', 'suv', 1999) \n                                 3                                  5 \n           ('toyota', 'suv', 2008)    ('volkswagen', 'compact', 1999) \n                                 3                                  8 \n   ('volkswagen', 'compact', 2008)    ('volkswagen', 'midsize', 1999) \n                                 6                                  4 \n   ('volkswagen', 'midsize', 2008) ('volkswagen', 'subcompact', 1999) \n                                 3                                  4 \n('volkswagen', 'subcompact', 2008) \n                                 2 \n\nprint(\"---------\")\n\n[1] \"---------\"\n\nreticulate::py$df_mpg_grouped_reset_index  #collapsed multi-index\n\n   manufacturer      class year count\n1          audi    compact 1999     8\n2          audi    compact 2008     7\n3          audi    midsize 2008     2\n4          audi    midsize 1999     1\n5     chevrolet    2seater 2008     3\n6     chevrolet    2seater 1999     2\n7     chevrolet    midsize 2008     3\n8     chevrolet    midsize 1999     2\n9     chevrolet        suv 2008     6\n10    chevrolet        suv 1999     3\n11        dodge    minivan 1999     6\n12        dodge    minivan 2008     5\n13        dodge     pickup 2008    12\n14        dodge     pickup 1999     7\n15        dodge        suv 2008     4\n16        dodge        suv 1999     3\n17         ford     pickup 1999     5\n18         ford     pickup 2008     2\n19         ford subcompact 2008     5\n20         ford subcompact 1999     4\n21         ford        suv 1999     6\n22         ford        suv 2008     3\n23        honda subcompact 1999     5\n24        honda subcompact 2008     4\n25      hyundai    midsize 1999     4\n26      hyundai    midsize 2008     3\n27      hyundai subcompact 2008     5\n28      hyundai subcompact 1999     2\n29         jeep        suv 2008     6\n30         jeep        suv 1999     2\n31   land rover        suv 1999     2\n32   land rover        suv 2008     2\n33      lincoln        suv 1999     2\n34      lincoln        suv 2008     1\n35      mercury        suv 1999     2\n36      mercury        suv 2008     2\n37       nissan    compact 1999     2\n38       nissan    midsize 2008     5\n39       nissan    midsize 1999     2\n40       nissan        suv 1999     2\n41       nissan        suv 2008     2\n42      pontiac    midsize 1999     3\n43      pontiac    midsize 2008     2\n44       subaru    compact 2008     4\n45       subaru subcompact 1999     4\n46       subaru        suv 2008     4\n47       subaru        suv 1999     2\n48       toyota    compact 1999     7\n49       toyota    compact 2008     5\n50       toyota    midsize 1999     4\n51       toyota    midsize 2008     3\n52       toyota     pickup 1999     4\n53       toyota     pickup 2008     3\n54       toyota        suv 1999     5\n55       toyota        suv 2008     3\n56   volkswagen    compact 1999     8\n57   volkswagen    compact 2008     6\n58   volkswagen    midsize 1999     4\n59   volkswagen    midsize 2008     3\n60   volkswagen subcompact 1999     4\n61   volkswagen subcompact 2008     2\n\n#reticulate::py_last_error()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Setting up VSCode for Python and R with Quarto",
    "section": "",
    "text": "Note\n\n\n\nThis is still a work in progress! Images will be included. Any feedback highly welcome!\nThis blog guides you through installing Python, R, and Quarto in VSCode on a Windows machine.\nDownload the installers for: * Python download https://www.python.org/downloads/ * R download https://cran.r-project.org/bin/windows/base/ * VSCode download https://code.visualstudio.com/download * Quarto download https://quarto.org/docs/download/ * Git download https://git-scm.com/download/win\nInstall Python. A python.exe will be copied to a folder … and much more. You can have multiple Python versions installed in parallel. Open e cmd.exe or powershell.exe and type python --version. You will get the Python interpreter version of the python.exe that is in the %PATH% variable. It can be handy to have the folders with python.exe in the PATH variable. Normally pip is installed with Python. pip is the python package installer. You can type pip --version on the command line.\nAlso install R, Quarto, Git and VSCode. The order does not matter\nThe paths of the executables of all should be in the PATH environment variable of Windows. echo %PATH% on cmd.exe. Or/and you should now where they are on your machine.\nIn VSCode we need some extensions to interact properly with the above installed. * For Python: + Python + Python debugger + Pylance * For R: + R extension + R debugger * Quarto extension\nNow lets create a folder for a Python/R project and open it with File –&gt; Open Folder. Let’s create a virtual Python environment in this folder. Ctrl + shift + p opens the VSCode command palette. Type “create” and you should see Python: Create Environment. VSCode will find a the python interpreter that is in %PATH% or you can enter a path to a different python.exe (different version). From now onward, if you use pip to install a python library, it will be installed locally in the ./.venv folder of your project.\nWith Terminal –&gt; New Terminal open a new terminal window (basically a OS command line). Lets install the python library radian. radian makes the R console colorful and better readable. Open a terminal and pip install -U radian installs the required files. Let’s get some more Python libraries. pip install pandas installs the pandas library. pip list lists all locally installed libraries and pip freeze &gt; requirements.txt creates a list with all installed libraries plus version numbers. A great interactive python console is ipython, pip install ipython. Other useful packages are plotnine, statsmodels, scipy.\nWe still have to adapt a few settings in the VSCode extensions. Click on the Extensions symbol on the very left side, then on the sproket, select Extension settings. Look for R &gt; Rterm: Windows and enter the path for radian ({workspaceFolder}\\.venv\\Scripts\\radian.exe … copy it. You dont have to replace {workspaceFolder} with a explicit path). And we have to set R: Bracketed Paste. The extension settings are global to all VSCode projects. And in the R debugger extension we need to set the the R interpreter path, R &gt; Rpath Windows to, e.g. C:\\Program Files\\R\\R-4.4.1\\bin\\x64\\R.exe.\nFor R to work properly we need two R packages: languageserver and httpg. Simplest way is to click on the R symbol on the very left (somewhere below the extensions symbol). Under ‘help pages’ click on ‘Install CRAN Package’ or on the plus sign next to it and install * httpg and * languageserver * renv\nAt this point we have a working quarto setup with a virtual Python environment and globally installed R packages. We can also setup a virtual R environment, (renv)[https://rstudio.github.io/renv/articles/renv.html], to keep R packages local in the project folder. Virtual environments allow different projects using different interpreter and package versions.\nInstalling renv: How-to can be found here renv. With renv::init() on the R console creates a R environment in the current project folder. To open the R console just type radian on a VSCode terminal command line (Terminal -&gt; New Terminal). After restarting the R session we should also install the following packages from the R console. * install.packages(\"languageserver\") * install.packages(\"httpgd\") * install.packages(\"reticulate\") * install.packages(\"tidyverse\") * install.packages(\"ggplot2\")\nHint: renv.lock only reflects packages used in the project, (see)[https://rstudio.github.io/renv/articles/faq.html#why-isnt-my-package-being-snapshotted-into-the-lockfile]. To be sure that renv.lock is up to date, type renv::snapshot().\nTip: quarto install tinytex from the terminal command line, installs a library that allows .pdf rendering from quarto.\nOther useful things: * TODOTree extension * set VSCode to autosave"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Setting up VSCode for Python and R with Quarto",
    "section": "Resources",
    "text": "Resources\nPython download https://www.python.org/downloads/ VSCode download https://code.visualstudio.com/download Quarto download https://quarto.org/docs/download/ Git download https://git-scm.com/download/winA py Quarto HTML basics https://quarto.org/docs/output-formats/html-basics.html Quarto Markdown basics https://quarto.org/docs/authoring/markdown-basics.html Quarto GitHub Pages https://quarto.org/docs/publishing/github-pages.html renv https://rstudio.github.io/renv/articles/renv.html\n\nVideos\nGit in VSCode https://www.youtube.com/watch?v=i_23KUAEtUM\nThe panda eats, shoots and leaves. The panda eats shoots and leaves."
  }
]